<?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper
                PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.mapper.ResponseMapper">

    <resultMap id="responseResultMap" type="org.example.entity.response.Response">
        <id property="rid" column="rid"/>
        <result property="sid" column="sid"/>
        <result property="uid" column="uid"/>
        <result property="createTime" column="record_create_time"/>
        <result property="updateTime" column="record_update_time"/>
        <result property="grade" column="surveyGrade"/>
        <result property="finished" column="finished"/>
        <result property="valid" column="valid"/>
        <collection property="items" ofType="org.example.entity.response.ResponseItem">
            <id property="submitId" column="submit_id"/>
            <result property="rid" column="rid"/>
            <result property="qid" column="qid"/>
            <result property="grade" column="questionGrade"/>
            <result property="createTime" column="item_create_time"/>
            <result property="updateTime" column="item_update_time"/>
            <result property="content" column="content" typeHandler="org.example.handler.type.StringListHandler"/>
        </collection>
    </resultMap>

    <resultMap id="responseItemResultMap" type="org.example.entity.response.ResponseItem">
        <id property="submitId" column="submit_id"/>
        <result property="rid" column="rid"/>
        <result property="qid" column="qid"/>
        <result property="grade" column="grade"/>
        <result property="content" column="content" typeHandler="org.example.handler.type.StringListHandler"/>
    </resultMap>

    <insert id="insertRecord" parameterType="org.example.entity.response.Response" useGeneratedKeys="true" keyProperty="rid">
        INSERT INTO response_record (rid, sid, uid, create_time, update_time, finished)
        VALUES (#{rid}, #{sid}, #{uid}, #{createTime}, #{updateTime}, IFNULL(#{finished}, DEFAULT(finished)))
    </insert>

    <insert id="insertItems" parameterType="list" useGeneratedKeys="true" keyProperty="submitId">
        INSERT INTO response_item (rid, qid, content) VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.rid}, #{item.qid}, #{item.content,typeHandler=org.example.handler.type.StringListHandler})
        </foreach>
    </insert>

    <update id="setRecordGrade">
        UPDATE response_record SET grade = #{grade}, finished = true, update_time = now()
        WHERE rid = #{rid}
    </update>

    <update id="setItemGrade">
        UPDATE response_item SET grade = #{grade}
        WHERE submit_id = #{submitId}
    </update>

    <update id="updateResponse" parameterType="org.example.entity.response.Response">
        UPDATE response_record
        <set>
            <if test="finished != null">finished = #{finished},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="grade != null">grade = #{grade},</if>
            <if test="valid != null">valid = #{valid}</if>
        </set>
        WHERE rid = #{rid}
    </update>

    <update id="updateItems">
        <foreach collection="list" item="item" separator=";">
            UPDATE response_item SET content = #{item.content,typeHandler=org.example.handler.type.StringListHandler}
            WHERE submit_id = #{item.submitId}
        </foreach>
    </update>

    <delete id="deleteRecordsBySid" parameterType="long">
        DELETE FROM response_record WHERE sid = #{sid}
    </delete>

    <delete id="deleteRecordByRid" parameterType="long">
        DELETE FROM response_record WHERE rid = #{rid}
    </delete>

    <delete id="deleteItemsByRid" parameterType="long">
        DELETE FROM response_item WHERE rid = #{rid}
    </delete>


    <select id="getBySid" parameterType="long" resultMap="responseResultMap">
        SELECT response_record.rid as rid, sid, uid, response_record.create_time AS record_create_time, response_record.update_time AS record_update_time, response_record.grade as surveyGrade, finished, valid,
               submit_id, qid, content, response_item.grade as questionGrade, response_item.create_time AS item_create_time, response_item.update_time AS item_update_time
        FROM response_record LEFT JOIN response_item on response_record.rid = response_item.rid
        WHERE sid = #{sid}
    </select>


    <select id="getByUid" parameterType="long" resultMap="responseResultMap">
        SELECT response_record.rid as rid, sid, uid, response_record.create_time AS record_create_time, response_record.update_time AS record_update_time, response_record.grade as surveyGrade, finished, valid,
               submit_id, qid, content, response_item.grade as questionGrade, response_item.create_time AS item_create_time, response_item.update_time AS item_update_time
        FROM response_record LEFT JOIN response_item on response_record.rid = response_item.rid
        WHERE uid = #{uid}
    </select>

    <select id="getByRid" parameterType="long" resultMap="responseResultMap">
        SELECT response_record.rid as rid, sid, uid, response_record.create_time AS record_create_time, response_record.update_time AS record_update_time, response_record.grade as surveyGrade, finished, valid,
               submit_id, qid, content, response_item.grade as questionGrade, response_item.create_time AS item_create_time, response_item.update_time AS item_update_time
        FROM response_record LEFT JOIN response_item on response_record.rid = response_item.rid
        WHERE response_record.rid = #{rid}
    </select>

    <select id="condQuery" resultType="Long">
        SELECT response_record.rid FROM response_record
        <where>
            sid = #{sid}
            <if test="valid != null">
                AND valid = #{valid}
            </if>
            <if test="gradeLb != null">
                AND response_record.grade >= #{gradeLb}
            </if>
            <if test="gradeUb != null">
                AND response_record.grade &lt;= #{gradeUb}
            </if>
            <if test="condition != null and !condition.isEmpty()">
                AND EXISTS (
                    SELECT 1 FROM response_item ri
                    WHERE ri.rid = response_record.rid AND
                    (<foreach collection="condition.entrySet()" item="value" index="key" open="" close="" separator="OR">
                        ri.qid = #{key}
                        AND JSON_CONTAINS(content, CONCAT('\"', #{value}, '\"'))
                    </foreach>)
                    HAVING COUNT(ri.qid) = #{querySize}
                )
            </if>
        </where>
    </select>

    <select id="getByRids" resultMap="responseResultMap">
        SELECT response_record.rid as rid, sid, uid, response_record.create_time AS record_create_time, response_record.update_time AS record_update_time, response_record.grade as surveyGrade, finished, valid,
        submit_id, qid, content, response_item.grade as questionGrade, response_item.create_time AS item_create_time, response_item.update_time AS item_update_time
        FROM response_record LEFT JOIN response_item ON response_record.rid = response_item.rid
        WHERE response_record.rid IN
        <foreach item="rid" collection="rids" open="(" separator="," close=")">
            #{rid}
        </foreach>
        ORDER BY record_create_time DESC
    </select>

    <select id="getByQid" resultMap="responseItemResultMap">
        SELECT submit_id, rid, qid, grade, content, create_time, update_time
        FROM response_item
        WHERE qid = #{qid}
        ORDER BY create_time
    </select>

    <select id="getSidByUid" resultType="org.example.entity.response.Response">
        SELECT sid, rid, update_time
        FROM (
                 SELECT sid, rid, update_time,
                        ROW_NUMBER() OVER (PARTITION BY sid, uid ORDER BY update_time DESC) AS rn
                 FROM response_record
                 WHERE uid = #{uid}
             ) AS ranked
        WHERE rn = 1
        ORDER BY update_time DESC;
    </select>

    <select id="getBySubmitId" resultMap="responseResultMap">
        SELECT response_record.rid as rid, sid, uid, response_record.create_time AS record_create_time, response_record.update_time AS record_update_time, response_record.grade as surveyGrade, finished, valid,
               submit_id, qid, content, response_item.grade as questionGrade, response_item.create_time AS item_create_time, response_item.update_time AS item_update_time
        FROM response_record LEFT JOIN response_item on response_record.rid = response_item.rid
        WHERE response_record.rid = (
            SELECT rid
            FROM response_item
            WHERE submit_id = #{submitId}
        )
    </select>

    <select id="getBySubmitIds" parameterType="list" resultMap="responseItemResultMap">
        SELECT submit_id, rid, qid, grade, content, create_time, update_time
        FROM response_item
        WHERE submit_id IN
        <foreach collection="submitIds" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="getRecordsBySid" resultType="org.example.entity.response.Response">
        SELECT rid, sid, uid, create_time, update_time, grade, finished, valid
        FROM response_record
        WHERE sid = #{sid}
        <if test="valid != null">
            AND valid = #{valid}
        </if>
    </select>

    <select id="findByCreateTimeRange" resultType="org.example.entity.response.Response">
        SELECT rid, sid, uid, create_time, update_time, grade, finished, valid
        FROM response_record
        WHERE create_time BETWEEN #{start} AND #{end}
    </select>

    <select id="countDailyResponse" resultType="map">
        SELECT DATE(create_time) AS day, COUNT(0) AS count
        FROM response_record
        WHERE sid = #{sid} AND create_time BETWEEN #{start} AND #{end}
        GROUP BY day
    </select>

</mapper>